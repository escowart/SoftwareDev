import glob
import io
import os
import unittest

from evolution.all_evo import *
from evo_tests.constants import *
from evo_tests.util import remove_white_space, evo_tests_path
from old_exe import xattack, xfeed, xstep, xgui, xstep4, xsilly


RUN_ONLY = []


SKIP_FILES = []


def is_file_in_list(filename: str, file_list: List[str]) -> bool:
    """ Should the given file in the given list of filenames
    :param filename: The file's name
    :return: True if the given file should be skipped, false otherwise
    """
    filename_len = len(filename)
    for file_str in file_list:
        file_str_len = len(file_str)
        if (file_str_len <= filename_len) and (file_str == filename[-file_str_len:]):
            return True

    return False


class TestJSON(unittest.TestCase):
    """ The JSON Tester """
    def _test_json_in_directory(self, dir_name: str, process_json_function, has_out: bool = True) -> None:
        """ Test the processed json in_files against their expected results
        :param dir_name: The name of the directory containing the json files
        :param process_json_function: The json in_file processor function
        """
        num_tests_run = 1
        for in_filename in glob.glob(os.path.join(evo_tests_path, dir_name, '*-' + IN_JSON)):
            # Skip Condition
            if is_file_in_list(in_filename, SKIP_FILES):# or not is_file_in_list(in_filename, RUN_ONLY):
                continue

            in_file = open(in_filename)
            in_file_str = remove_white_space(in_file.read())
            in_file = open(in_filename)

            out_file = io.StringIO()
            try:
                #print("\n Running: " + in_filename + "\n")
                process_json_function(in_file, out_file)
            except Exception as e:
                print("\n Exception: " + in_filename + "!!!!!!!!!\n")
                raise e

            actual_out_str = out_file.getvalue()

            if has_out:
                self._test_json_output(in_file_str, in_filename, actual_out_str, out_file)

            in_file.close()

            num_tests_run += 1
        self.assertNotEqual(num_tests_run, 0, "No test files loaded")

    def _test_json_output(self, in_file_str: str, in_filename: str, actual_out_str: str, out_file: io.StringIO):
        """ Test the JSON actual output generated by the in_file against the the one generated by the outfile with the
        same name
        :param in_file_str: The in-file str
        :param in_filename: The filename of the *-in.json
        :param actual_out_str: The actual string produced by the in_filename
        :param out_file: To be closed after
        """

        expected_out_filename = in_filename.replace(IN_JSON, OUT_JSON)
        expected_out_file = open(expected_out_filename)
        excepted_out_str = expected_out_file.read()  # str

        excepted_out_str = remove_white_space(excepted_out_str)
        actual_out_str = remove_white_space(actual_out_str)

        if excepted_out_str != actual_out_str:
            print("\n" + in_filename + ":")
            print("\t-Input:    " + in_file_str)
            print("\t-Expected: " + excepted_out_str)
            print("\t-Actual:   " + actual_out_str + "\n")
        else:
            self.assertEqual(excepted_out_str, actual_out_str, in_filename)

        out_file.close()

    def test_situation(self):
        self._test_json_in_directory(JSON_SITUATION_DIR, xattack.process_json_situation)

    def test_feeding_6(self):
        self._test_json_in_directory(JSON_FEEDING_6_DIR, xfeed.process_json_feeding_6)

    def test_feeding_7(self):
        self._test_json_in_directory(JSON_FEEDING_7_DIR, xfeed.process_json_feeding_7)

    def test_feed1(self):
        self._test_json_in_directory(JSON_XSTEP_DIR, xstep.process_json_configuration)

    def test_step4(self): # TODO
        self._test_json_in_directory(JSON_XSTEP4_DIR, xstep4.process_json_step4)

    def test_silly(self):
        self._test_json_in_directory(JSON_XSILLY_DIR, xsilly.process_json_silly_choice)

    def _test_gui(self):
        self._test_json_in_directory(JSON_XGUI_DIR, xgui.run_gui, has_out=False)


if __name__ == '__main__':
    unittest.main()
